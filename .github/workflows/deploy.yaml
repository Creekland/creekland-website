name: Deploy Creekland Website

on:
  pull_request:
    branches:
      - main
      - staging
      - dev
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - closed
    paths:
      - "src/**"
      - "angular.json"
      - "package.json"
      - ".github/workflows/deploy.yaml"

  push:
    branches:
      - main
      - staging
      - dev
    paths:
      - "src/**"
      - "angular.json"
      - "package.json"
      - ".github/workflows/deploy.yaml"

env:
  AWS_REGION: us-east-1

permissions:
  id-token: write
  contents: read
  pull-requests: write
  issues: write

jobs:
  # ----------------------------
  # Build Job (runs on PR commits)
  # ----------------------------
  build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: 💾 Cache Node Modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🛠️ Build Angular App
        run: npm run build -- --configuration=development

      - name: ✅ Build Status
        run: echo "Angular build completed successfully."

  # ----------------------------
  # Deploy Job
  # ----------------------------
  deploy:
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🧠 Set Deployment Target
        id: vars
        run: |
          BRANCH=${GITHUB_REF##*/}
          if [[ "$BRANCH" == "main" ]]; then
            echo "bucket=creekland.co" >> "$GITHUB_OUTPUT"
            echo "cf_url=https://<main-cloudfront-url>/" >> "$GITHUB_OUTPUT"
            echo "cf_id=${{ secrets.CLOUDFRONT_MAIN_ID }}" >> "$GITHUB_OUTPUT"
            echo "build_config=production" >> "$GITHUB_OUTPUT"
          elif [[ "$BRANCH" == "staging" ]]; then
            echo "bucket=staging.creekland.co" >> "$GITHUB_OUTPUT"
            echo "cf_url=https://<staging-cloudfront-url>/" >> "$GITHUB_OUTPUT"
            echo "cf_id=${{ secrets.CLOUDFRONT_STAGING_ID }}" >> "$GITHUB_OUTPUT"
            echo "build_config=staging" >> "$GITHUB_OUTPUT"
          else
            echo "bucket=dev.creekland.co" >> "$GITHUB_OUTPUT"
            echo "cf_url=https://d3m08y6aktpl85.cloudfront.net/" >> "$GITHUB_OUTPUT"
            echo "cf_id=${{ secrets.CLOUDFRONT_DEV_ID }}" >> "$GITHUB_OUTPUT"
            echo "build_config=development" >> "$GITHUB_OUTPUT"
          fi

      - name: 🛠️ Build Angular App
        run: npm run build -- --configuration=${{ steps.vars.outputs.build_config }}

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ☁️ Upload to S3
        run: |
          aws s3 sync ./dist/creekland-website \
          s3://${{ steps.vars.outputs.bucket }} \
          --delete \
          --cache-control "no-cache"

      - name: 🚀 Invalidate CloudFront Cache
        if: ${{ steps.vars.outputs.cf_id != '' }}
        run: |
          aws cloudfront create-invalidation \
          --distribution-id ${{ steps.vars.outputs.cf_id }} \
          --paths "/*"

      - name: 💬 Comment CloudFront URL on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const url = '${{ steps.vars.outputs.cf_url }}';
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 Deployment complete!\n\n**Preview URL:** [${url}](${url})`
            });
